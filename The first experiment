
// ConsoleApplication1.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

/*----------------头文件	*/
#define	_CRT_SECURE_NO_WARNINGS #include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <windows.h>

/*----------------------------------*
学生信息-结构体设计
*-----------------------------------*/

typedef struct student
{
	char number[20]; //学号char name[20]; // 姓 名
	float dailyScore; //平时成绩float experiScore; //实验成绩float finalScore; //期末成绩float generalScore; //总评成绩

}SS;


/*----------------函数定义	*/

//1.1 手动输入学生基本数据void readData(SS stu[], int N)
{
	printf("请按照如下格式输入学生信息：学号 姓名 平时成绩 实验成绩 期末成绩\n");
	for (int i = 0; i < N; ++i)
	{
		printf("第%d 个学生:", i + 1);
		scanf("%s	%s	%f	%f	%f", stu[i].number, stu[i].name, &stu[i].dailyScore, &stu[i].experiScore, &stu[i].finalScore);
		printf("\n");

	}
	printf("------成绩录入完毕!	\n");

}

//1.2 从文件里读取学生基本数据SS* readDataFromFile(int *N)
{
	printf("\n\n------第一步: 从文件读取学生的成绩信息	\n\n");
	SS *stu;// 开辟新空间,存取文件中的每个学生信息FILE *fp = NULL;
	int count = 0; int index = 0;
	fp = fopen("data.txt", "r");
	//1.获取学生数目if (fp != NULL)
	{
		fscanf(fp, "%d", &count);
		*N = count;
	}
else
{
printf("failed to open the info file\n"); getchar();
}
printf("学生数目为:%d\n\n", count);
//2.给所有学生分配存储空间
stu = (SS*)malloc(count * sizeof(SS));

//3.读取每条学生的信息int i = 0;
printf("	学号	姓名	平时成绩	实验成绩	期末成绩\n\n"); while ((!feof(fp)))
{
	fscanf(fp, "%s	%s	%f	%f	%f", stu[i].number, stu[i].name, &stu[i].dailyScore, &stu[i].experiScore, &stu[i].finalScore);
	printf("%s %7s %8.2f %8.2f %9.2f\n\n", stu[i].number, stu[i].name, stu[i].dailyScore, stu[i].experiScore, stu[i].finalScore);

	++i;
}
printf("------成绩录入完毕!	\n");
fclose(fp); return stu;
}

//2.计算 N 个学生各自的总评成绩void calcuScore(SS stu[], int N)
{
	printf("\n\n------第二步: 计算每个学生的总评成绩	\n\n");
	printf("	学号	总评成绩\n\n"); for (int i = 0; i < N; ++i)
	{
		stu[i].generalScore = 0.2*stu[i].dailyScore + 0.2*stu[i].experiScore + 0.6*stu[i].finalScore; //计算总成绩，公式： 总成绩=0.2*平时成绩+0.2*实验成绩+0.6*期末成绩
		printf("%s %8.2f\n\n", stu[i].number, stu[i].generalScore);
	}
	printf("\n------总成绩计算完毕!	\n");
}



//3.根据总评成绩排名
int cmpBigtoSmall(const void *a, const void *b)
{
	SS *aa = (SS *)(a);
	SS *bb = (SS *)(b);
	return (*aa).generalScore < (*bb).generalScore;
}

void sortScore(SS stu[], int N)
{
	qsort(stu, N, sizeof(SS), cmpBigtoSmall);	//C++ 自带的排序函数
}

//4.按照一定的格式输出 N 个学生的信息void printOut(SS stu[], int N)

{
	printf("\n------第三步: 根据总成绩输出学生排名信息!	\n\n");
	printf("排名	学号\t	姓名	平时成绩	实验成绩 期末成绩 总评成
		绩\n");
		for (int i = 0; i < N; ++i)
		{
			printf("%2d %s %7s %8.2f %8.2f %8.2f %8.2f\n", i + 1, stu[i].number, stu[i].name, stu[i].dailyScore, stu[i].experiScore, stu[i].finalScore, stu[i].generalScore);
		}
	printf("\n------ 根据总成绩输出学生排名信息完毕!	\n\n");
}

//5.查询：输入学号可查询某个学生的成绩信息
void inquiry(SS stu[], int N, char ID[]) //参数意义：学号，学生总人数
{
	for (int i = 0; i < N; ++i)
	{
		if (strcmp(stu[i].number, ID) == 0)
		{
			printf("排名  学号\t   姓名  平时成绩  实验成绩 期末成绩总评成绩\n");
			printf("%2d %s %7s %8.2f %8.2f %8.2f %8.2f\n", i + 1, stu[i].number, stu[i].name, stu[i].dailyScore, stu[i].experiScore, stu[i].finalScore, stu[i].generalScore);
			printf("\n------ 查询完毕!	\n\n");
			return;
		}
	}
	printf("\n------ 该学号不存在!	\n\n");
}

//6.判断是否需要通过学号查询，如果是则查询void query(SS stu[], int N)
{
	int judge;
	printf("是否需要查询学生信息？0.是	1.否\n"); scanf("%d", &judge);

	if (judge)
	{
		printf("\n\n"); return;
	}
	printf("请输入要查询学生的学号：\n"); char ID[20];
	scanf("%s", ID); inquiry(stu, N, ID); query(stu, N);
}

//7.分析：统计全班学生成绩的均值和标准方差，并对成绩分布简要分析void analyse(SS stu[], int N)
{
	float sum = 0;
	for (int i = 0; i < N; ++i)
	{
		sum += stu[i].generalScore;
	}
	sum = sum / (float)N;
	printf("全班学生成绩的均值为：%.2f\n", sum); float variance = 0;
	for (i = 0; i < N; ++i)
	{
		variance += (stu[i].generalScore - sum)*(stu[i].generalScore -
			sum);
	}
	variance = sqrt(variance / (float)N);
	printf("全班学生成绩的标准方差为：%.2f\n", variance);
}

/*----------------------------------*
主函数
*-----------------------------------*/

int main()
{


	printf("******************************\n"); printf("	学生成绩管理分析系统	\n"); printf("******************************\n\n");

	/*-1.变量初始化-*/
	int N = 0;	//学生总数
	SS	*pstu = NULL;	//学生数组-结构体数组指针实现

	//2.读取学生信息
	pstu = readDataFromFile(&N);

	/*-3.计算学生总成绩（总成绩=0.2*平时成绩+0.2*实验成绩+0.6*期末成绩)--*/
	calcuScore(pstu, N);

	/*-4.根据学生成绩排名-*/ sortScore(pstu, N);

	/*-5.按照排名输出学生信息-*/ printOut(pstu, N);

	/*-6.通过学号查询学生信息-*/ query(pstu, N);

	/*-7.按照排名输出学生信息-*/ analyse(pstu, N);

	/*-6.释放动态内存空间-*/ free(pstu);


	system("pause"); return 0;
}
// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
