程序一栈类
·  
# include<iostream>  
·  # include<cstdlib>  
·  # include<cstring>  
·  # include<windows.h>  
·  using namespace std;  
·  const int MAXSIZE = 20;  
·  class Stack  
·  {  
·  private:  
·      int top;  
·      double data[MAXSIZE];  
·  public:  
·      Stack();  
·      ~Stack();  
·      void initial();  
·      bool isFull();  
·      bool isEmpty();  
·      void push(double& val);  
·      double pop();  
·      int sizeStack();  
·      int getTop();  
·  };  
·  Stack::Stack()//构造函数  
·  {  
·      top = 0;  
·      memset(data, 0, sizeof(data));  
·  }  
·  Stack::~Stack()//析构函数  
·  {  
·    
·  }  
·  void Stack::initial()//普通初始化函数  
·  {  
·      top = 0;  
·      memset(data, 0, sizeof(data));  
·  }  
·  bool Stack::isFull()//判栈满  
·  {  
·      if (top == MAXSIZE)  
·          return true;  
·      else  
·          return false;  
·  }  
·  bool Stack::isEmpty()//判栈空  
·  {  
·      if (top == 0)  
·          return true;  
·      else  
·          return false;  
·  }  
·  void Stack::push(double& val)//入栈  
·  {  
·      data[top] = val;  
·      top++;  
·  }  
·  double Stack::pop()//出栈  
·  {  
·      top--;  
·      return data[top];  
·  }  
·  int Stack::sizeStack()//计算栈的大小  
·  {  
·      return top;  
·  }  
·  int Stack::getTop()//返回栈  
·  {  
·      return top;  
·  }  
·  int main()  
·  {  
·      cout << "栈类设计与测试" << endl;  
·      Stack ss;  
·      cout << "当前栈的大小为：" << ss.sizeStack() << ",允许继续入栈。。。" << endl << endl;  
·      double temp = 0;  
·      while (!ss.isFull())  
·      {  
·          cout << "压栈，请输入数据（0终止）：";  
·          cin >> temp;  
·          if (temp == 0)  
·          {  
·              cout << "入栈完毕！" << endl << endl;  
·              break;  
·          }  
·          ss.push(temp);  
·          cout << "成功入栈!" << endl;  
·      }  
·      cout << "从栈顶依次输出当前栈内" << ss.getTop() << "个数据：" << endl;  
·      while (!ss.isEmpty())  
·      {  
·          cout << ss.pop() << "";  
·      }  
·      cout << endl;  
·      system("pause");  
·      return 0;  
·  }  
程序二 字符串类
·  
#include<iostream>  
·  #include<string.h>  
·  using namespace std;  
·  class String  
·  {  
·  public:  
·      typedef char* p;  
·  public:  
·      string()  
·      {};  
·      string(const char* str)  
·      {  
·          if (nullptr--str)  
·          {  
·              str = "";  
·          }  
·          S_size = strlen(str);  
·          S_str = new char[S_size + 1];  
·          S_capacity = S_size;  
·          strcpy(S_str, str);  
·       }  
·      String(const char* str, size_t size)  
·      {  
·          if (size < 0)  
·          {  
·              cout << "size error" << endl;  
·              exit(EXIT_SUCCESS);  
·          }  
·          S_size = size;  
·          S_str = new char[S_size + 1];  
·          S_capacity = S_size;  
·          strncpy(_str, str, size);  
·          if (size < strlen(str))  
·          {  
·              S_str[S_size] = 0;  
·          }  
·      }  
·      String(const String& s)  
·      {  
·          String strTmp(s.S_str);  
·          swap(S_str, strTmp);  
·      }  
·      String& operator=(const String& s)  
·      {  
·          if (&s != this)  
·          {  
·              char* pStr = new char[s._capacity + 1];  
·              strcpy(pStr, s.S_str);  
·              delete[]S _str;  
·              S_str = pStr;  
·              S_size = s._size;  
·              S_capacity = s._capacity;  
·          }  
·          return *this;  
·      }  
·      ~String()  
·      {  
·          delete[]S_str;  
·          S_str = nullptr;  
·          S_capacity = 0;  
·          S_size = 0;  
·      }  
·      p Begin();  
·      p End();  
·      //反向查找  
·      p RBegin();  
·      p REnd();  
·    
·      //2. 增删改查  
·      void PushBack(char c); //尾插字符  
·      void Append(const char* str); //追加字符串  
·      String& Insert(size_t pos, char c); //在指定位置插入字符  
·      String& Insert(size_t pos, const char* str); //在指定位置插入字符串  
·      String& Erase(size_t pos, size_t len);  //删除指定位置,指定长度的内容  
·      void Resize(size_t newSize, char c = '0'); //调整大小  
·      void Reserve(size_t newCapacity); //扩容  
·      int Size()const; //查询字符串大小  
·      int Capacity()const; //查询容量  
·      bool Empty()const; //判断是否为空  
·      void Clear(); //清空  
·      int Find(char c, size_t pos = 0); //查找字符第一次出现的位置  
·      int rFind(char c); //从后往前查找字符第一次出现的位置  
·      void Swap(String& s); //字符串交换  
·      String SubStr(size_t pos, size_t size); //截取字符串  
·      const char* C_Str()const; //以C的形式输出  
·    
·      //3. []的重载  
·      char& operator[](size_t index);  
·      const char& operator[](size_t index)const;  
·    
·      //4. 运算符的重载  
·      bool operator<(const String& s);  
·      bool operator<=(const String& s);  
·      bool operator>(const String& s);  
·      bool operator>=(const String& s);  
·      bool operator==(const String& s);  
·      bool operator!=(const String& s);  
·      String operator+(char c); //+符号的重载  
·      String operator+(const char* str);  
·          String operator+=(char c)   //+=符号的重载  
·          String operator+=(const char* str)  
·    
·          //<<&>>的重载  
·          friend ostream& operator<<(ostream& _cout, const String& s)  
·          friend istream& operator>>(istream& _cin, String& s)  
·  private:  
·      char* _str;  
·      size_t _capacity;  
·      size_t _size;  
·      //find函数没找到的返回值  
·      const static int npos;  
·  };  
·    
·  const int String::npos = -1;  
程序三 三角形类

程序四 学生类
#define  _CRT_SECURE_NO_WARNINGS  
  
/************************************************* 
** 任务 : 设计学生类Student，处理学生信息（姓名、性别、学号、出生日期、家庭住址、6个科目的考试成绩） 
** 对外接口:   构造函数：初始化学生类对象（无参构造，有参构造，拷贝构造，至少3种） 
**            普通函数：获取学生任意信息，修改学生成绩信息，输出学生信息 
**            析构函数：释放学生类对象内存空间 
** 作者 : Huihuang 
** 创建 : 2020-11-10 
/**************************************************/  
  
#include<cstdlib>  
#include<cstring>  
#include <iostream>  
using namespace std;  
const int N = 10;  
int sum = 0;  
  
  
/*----------------------------------* 
             学生类的定义 
*-----------------------------------*/  
  
class Student  
{  
private:  
    char* name;         //姓名  
    char sex;          //性别：W女，F男  
    char number[20];    //学号  
    char breath[20];    //出生日期(20001101)  
    char address[20];   //家庭住址  
    double score;       //成绩  
public:  
    Student();  
    Student(char* na, char se, char* nu, char* br, char* ad, double sc);  
    Student(const Student& per);  
    ~Student();  
    char* Getname();  
    void Display();     //显示学生信息  
    void Input();       //输入学生信息  
};  
  
  
/*----------------------------------* 
          学生类的成员函数 
*-----------------------------------*/  
  
//无参构造函数  
Student::Student()  
{  
    //  cout << "调用无参构造函数" << endl;  
    name = NULL;  
}  
  
//有参构造函数  
Student::Student(char* na, char se, char* nu, char* br, char* ad, double sc)  
{  
    //  cout << "调用有参构造函数" << endl;  
    if (na)  
    {  
        name = new char[strlen(na) + 1];   //避免浅拷贝  
        strcpy(name, na);  
    }  
    sex = se;  
    strcpy(number, nu);  
    strcpy(breath, br);  
    strcpy(address, ad);  
    score = sc;  
}  
  
//拷贝构造函数  
Student::Student(const Student& per)  
{  
    cout << "调用拷贝构造函数" << endl;  
    if (per.name)  
    {  
        name = new char[strlen(per.name) + 1];  
        strcpy(name, per.name);  
    }  
    sex = per.sex;  
    strcpy(number, per.number);  
    strcpy(breath, per.breath);  
    strcpy(address, per.address);  
    score = per.score;  
}  
  
//析构函数  
Student::~Student()  
{  
    //  cout << "调用析构函数" << endl;  
    if (name)  
        delete[]name;  
}  
  
//提取姓名  
char* Student::Getname()  
{  
    return name;   //用于搜索是否存在此人  
}  
  
//显示学生信息  
void Student::Display()  
{  
    cout << " 姓   名：" << name << endl;  
    cout << " 性   别：" << sex << endl;  
    cout << " 学   号：" << number << endl;  
    cout << " 出生日期：" << breath << endl;  
    cout << " 家庭住址：" << address << endl;  
    cout << " 考试成绩：" << score << endl;  
}  
  
//输入学生信息  
void Student::Input()  
{  
    char na[20];  
    cout << "输入姓   名：";  
    cin >> na;  
    if (name)  
        delete[]name;  
    name = new char[strlen(na) + 1];  
    strcpy(name, na);  
    cout << "输入性   别：";  
    cin >> sex;  
    cout << "输入学   号：";  
    cin >> number;  
    cout << "输入出生日期：";  
    cin >> breath;  
    cout << "输入家庭地址：";  
    cin >> address;  
    cout << "输入考试成绩：";  
    cin >> score;  
}  
  
  
/*----------------------------------* 
              普通函数 
*-----------------------------------*/  
  
//定义菜单函数  
void menu()  
{  
    cout << "********1.录入信息********" << endl;  
    cout << "********2.查询信息********" << endl;  
    cout << "********3.浏览信息********" << endl;  
    cout << "********0.退    出********" << endl;  
}  
  
//输入对象数组元素  
void InputStu(Student* array)  
{  
    char ch;  
    do  
    {  
        array[sum].Input();  //调用成员函数完成一个学生对象的数据输入  
        sum++;  
        cout << "继续输入吗？(Y or N)" << endl;  
        cin >> ch;  
    } while (ch == 'Y');  
}  
  
//输出对象数组元素  
void OutputStu(Student* array)  
{  
    cout << "学生总人数=" << sum << endl;  
    for (int i = 0; i < sum; i++)  
    {  
        array[i].Display();  
        cout << endl;  
    }  
}  
  
//按姓名查询  
int SearchStu(Student* array, char* na)  
{  
    int i, j = N;  
    for (i = 0; i < sum; i++)  
    {  
        if (strcmp(array[i].Getname(), na) == 0)  
            j = i;  
    }  
    return j;  
}  
  
  
/*----------------------------------* 
               主函数 
*-----------------------------------*/  
int main()  
{  
  
    cout << "*******学生类信息管理系统********" << endl << endl;  
    cout << "-----------Huihuang------------" << endl << endl;  
    cout << "----------2020-11-10-----------" << endl << endl;  
  
    Student array[N];  //定义学生数组  
    int choice;         //读入选项  
    do  
    {  
        cout << endl;  
        menu();  
        cout << "请输入你的选择：" << endl;  
        cin >> choice;  
        if (choice >= 0 && choice <= 3)  
            switch (choice)  
            {  
            case 1:InputStu(array); break;  
  
            case 2:cout << "请输入要查询的学生姓名：" << endl;  
                char na[20];  
                cin >> na;  
                int i;  
                i = SearchStu(array, na);  
                if (i == N)  
                    cout << "查无此人！" << endl;  
                else  
                    array[i].Display();  
                break;  
  
            case 3:OutputStu(array); break;  
  
            default:  
                break;  
            }  
    } while (choice);  
  
    cout << "************测试完毕!***********" << endl << endl;  
    system("pause");  
    return 0;  
}  
程序五 点类
1.# include<iostream>  
2.# include<math.h>  
3.# include<stdio.h>  
4.using namespace std;  
5.class Point  
6.{  
7.private :  
8.    double x, y;//定义横纵坐标  
9.public:  
10.    Point(double x, double y)  
11.    {  
12.        this-> x = x;  
13.        this-> y = y;  
14.    }  
15.    void setX(double x)   
16.    {  
17.        this->x = x;  
18.     }  
19.    void setY(double y)  
20.    {  
21.        this->y = y;  
22.    }  
23.    double getX() {  
24.        return this->x;  
25.    }  
26.    double getY() {  
27.        return this->y;  
28.    }  
29.    double distanceToOrigin()  
30.    {  
31.        return sqrt(x*x + y * y);//计算到原点的距离  
32.    }  
33.};  
34.int main()  
35.{  
36.    Point p(1, 2);  
37.    std::cout << p.distanceToOrigin() << std::endl;  
38.  
39.}  


